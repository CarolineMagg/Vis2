#version 430 core

#define _SPOT_LIGHTS_COUNT **%%SPOT_LIGHT_COUNT%%**
#define _POINT_LIGHTS_COUNT **%%POINT_LIGHT_COUNT%%**
#define _SHADOW_SAMPLES 12

layout (location = 0) out vec4 FragColor;
layout (location = 1) out vec4 FragColor2;
layout (location = 2) out vec4 NormalOut;

struct Material {
    sampler2D diffuse;
    sampler2D specular;
	sampler2D emissive;
	sampler2D normal;
	sampler2D height;
	sampler2DArray tonalArtMap;
    vec3 ambientColor;
    vec3 diffuseColor;
    vec3 specularColor;
	vec3 emissiveColor;
    float shininess;
};

struct PointLight {
    vec3 position;

    vec3 energy;

	float constant;
	float linear;
	float quadratic;

	float bias;
	int isActive;
};

struct SpotLight {
    vec3 direction;
    float cutOff;
    float outerCutOff;

    vec3 position;
    vec3 energy;

	float constant;
	float linear;
	float quadratic;

	float bias;
	int isActive;
};

in vec3 FragPos;
in vec3 Normal;
in vec2 TexCoords;
in vec4 FragPosLightSpace[_SPOT_LIGHTS_COUNT];

uniform vec3 viewPos;
uniform Material material;
uniform float alpha;
uniform float far_plane;
uniform int nrTones;

uniform PointLight pointLights[_POINT_LIGHTS_COUNT];
uniform samplerCube pointLightsDepthMaps[_POINT_LIGHTS_COUNT];
uniform SpotLight spotLights[_SPOT_LIGHTS_COUNT];
uniform sampler2DShadow spotLightsDepthMaps[_SPOT_LIGHTS_COUNT];

//x: use diffuse map or color
//y: use specular map or color
//z:
uniform ivec4 controls;

// pointlight smoothing
vec3 sampleDiscGrid[12] = vec3[]
(
   vec3(1, 1,  0), vec3( 1, -1,  0), vec3(-1, -1,  0), vec3(-1, 1,  0),
   vec3(1, 0,  1), vec3(-1,  0,  1), vec3( 1,  0, -1), vec3(-1, 0, -1),
   vec3(0, 1,  1), vec3( 0, -1,  1), vec3( 0, -1, -1), vec3( 0, 1, -1)
);

void addPointLight(int index, vec3 norm, vec3 viewDir, vec3 diffuseTex, vec3 specTex, inout vec3 normalResult, inout float tonalResult);
void addSpotLight(int index, vec3 norm, vec3 viewDir, vec3 diffuseTex, vec3 specTex, inout vec3 normalResult, inout float tonalResult);
float calculateShadow(vec4 fpls, sampler2D dm, float bias);
float calculateShadowPoint(vec3 lightPos, samplerCube dm, float bias);

void main() {
    // properties
    vec3 norm = normalize(Normal);
    vec3 viewDir = normalize(viewPos - FragPos);
	vec3 result = vec3(0);
	NormalOut = 0.5*vec4(norm,1)+vec4(0.5f);
	vec3 diffuseTex;
	if (controls.x == 1) {
		diffuseTex = texture(material.diffuse, TexCoords).rgb;
	} else {
		diffuseTex = material.diffuseColor;
	}
	vec3 specTex;
	if (controls.y == 1) {
		specTex = texture(material.specular, TexCoords).rgb;
	} else {
		specTex = material.specularColor;
	}
	vec3 ambientTex = diffuseTex;
	vec3 normalResult = vec3(0.0f, 0.0f, 0.0f);
	float tonalResult = 0.0f;

	float activeCount = 0;

    for(int i = 0; i < _POINT_LIGHTS_COUNT; i++) {
		if (pointLights[i].isActive == 1) {
			addPointLight(i, norm, viewDir, diffuseTex, specTex, normalResult, tonalResult);
			activeCount = activeCount + pointLights[i].energy.r * 1.3f;
		}
	}
	for(int i = 0; i < _SPOT_LIGHTS_COUNT; i++) {
		if (spotLights[i].isActive == 1) {
			addSpotLight(i, norm, viewDir, diffuseTex, specTex, normalResult, tonalResult);
			activeCount = activeCount + spotLights[i].energy.r;
		}
	}

	if (controls.w == 0) {
		FragColor = vec4(activeCount * 0.05 * ambientTex + normalResult, alpha);
	} else if (controls.w == 1) {
		FragColor2 = vec4(texture(material.tonalArtMap,vec3(TexCoords,(1.0f-tonalResult-0.05f*activeCount)*nrTones)).r);
		FragColor2.w = 1;
	} else {
		FragColor = vec4(activeCount * 0.05 * ambientTex + normalResult, alpha);
		FragColor2 = vec4(texture(material.tonalArtMap,vec3(TexCoords,(1.0f-tonalResult-0.05f*activeCount)*nrTones)).r);
		FragColor2.w = 1;
	}
}

float calculateShadow(vec4 fpls, sampler2DShadow dm, float bias) {

    // perform perspective divide
    vec3 projCoords = fpls.xyz / fpls.w;
    // transform to [0,1] range
    projCoords = projCoords * 0.5 + 0.5;

	if(projCoords.z > 1.0)
        return 0.0;

	float visibility = 0.0;
	vec3 texelSize = 1.0 / vec3(textureSize(dm, 0), 0);
	for(int x = -1; x <= 1; ++x)
	{
		for(int y = -1; y <= 1; ++y)
		{
			visibility += texture(dm, vec3(projCoords.xy, projCoords.z - bias) + texelSize * vec3(x, y, 0));
		}
	}
	visibility /= 9.0;

	//visibility = texture(dm, vec3(projCoords.xy, projCoords.z - bias));
    return visibility;
}

float calculateShadowPoint(vec3 lightPos, samplerCube dm, float bias) {

    vec3 fragToLight = FragPos - lightPos;
    float currentDepth = length(fragToLight);

    float shadow = 0.0;
    //int samples = 20;
    float viewDistance = length(viewPos - FragPos);
    float diskRadius = (1.0 + (viewDistance / far_plane)) / 25.0;
    for(int i = 0; i < _SHADOW_SAMPLES; ++i)
    {
        float closestDepth = texture(dm, fragToLight + sampleDiscGrid[i] * diskRadius).r;
        closestDepth *= far_plane;
        if(currentDepth - bias > closestDepth)
            shadow += 1.0;
    }
    shadow /= float(_SHADOW_SAMPLES);

    //testing
    //FragColor = vec4(vec3(closestDepth / far_plane), 1.0);

    return shadow;
}

void addPointLight(int index, vec3 norm, vec3 viewDir, vec3 diffuseTex, vec3 specTex, inout vec3 normalResult, inout float tonalResult) {
	PointLight light = pointLights[index];

	float intensity = 1 - calculateShadowPoint(light.position, pointLightsDepthMaps[index], light.bias);
	if (intensity == 0.0f) return;

	float distance = length(light.position - FragPos);
	//attenuation
    intensity *= 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));
	// travel distance correction test
	//if (intensity < 0.05f) return vec3(1.0, 0.0, 0.0);

    // diffuse
    vec3 lightDir = normalize(light.position - FragPos);
    float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = diff * diffuseTex;

	// specular
    vec3 halfwayDir = normalize(lightDir + viewDir);
    float spec = pow(max(dot(norm, halfwayDir), 0.0),  material.shininess);
	vec3 specular = spec * specTex;

	if (controls.w == 0) {
		normalResult += (light.energy * (diffuse + specular)) * intensity;
	} else if (controls.w == 1) {
		float luminosity = 0.2f*light.energy.r + 0.7f*light.energy.g+0.1f*light.energy.b;
		tonalResult += intensity * (luminosity * diff /*+ length(light.energy) * spec*/);
	} else {
		normalResult += (light.energy * (diffuse + specular)) * intensity;
		float luminosity = 0.2f*light.energy.r + 0.7f*light.energy.g+0.1f*light.energy.b;
		tonalResult += intensity * (luminosity * diff /*+ length(light.energy) * spec*/);
	}
}


void addSpotLight(int index, vec3 norm, vec3 viewDir, vec3 diffuseTex, vec3 specTex, inout vec3 normalResult, inout float tonalResult) {
	SpotLight light = spotLights[index];

    vec3 lightDir = normalize(light.position - FragPos);
    float diff = max(dot(norm, lightDir), 0.0);

    float theta = dot(lightDir, normalize(-light.direction));
    float epsilon = light.cutOff - light.outerCutOff;
    float intensity = clamp((theta - light.outerCutOff) / epsilon, 0.0, 1.0);
	if (intensity == 0.0f) return;

	float distance = length(light.position - FragPos);

	intensity *= calculateShadow(FragPosLightSpace[index], spotLightsDepthMaps[index], light.bias * distance/70.0f);
	if (intensity == 0.0f) return;

	//attenuation
    intensity *= 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));

	vec3 diffuse = diff * diffuseTex;

	// specular
    vec3 halfwayDir = normalize(lightDir + viewDir);
    float spec = pow(max(dot(norm, halfwayDir), 0.0),  material.shininess);
	vec3 specular = spec * specTex;

	if(controls.w == 0) {
		normalResult += light.energy * (diffuse + specular) * intensity;
	} else if (controls.w == 1) {
		float luminosity = 0.2f*light.energy.r + 0.7f*light.energy.g+0.1f*light.energy.b;
		tonalResult += intensity * (luminosity * diff);
	} else {
		normalResult += light.energy * (diffuse + specular) * intensity;
		float luminosity = 0.2f*light.energy.r + 0.7f*light.energy.g+0.1f*light.energy.b;
		tonalResult += intensity * (luminosity * diff);
	}
}

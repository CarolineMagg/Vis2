#version 440 core

#define _SPOT_LIGHTS_COUNT **%%SPOT_LIGHT_COUNT%%**
#define _POINT_LIGHTS_COUNT **%%POINT_LIGHT_COUNT%%**

struct Material {
    sampler2D diffuse;
    sampler2D specular;
	sampler2D emissive;
	sampler2D normal;
	sampler2D height;
	sampler2DArray tonalArtMap;
    vec3 ambientColor;
    vec3 diffuseColor;
    vec3 specularColor;    
	vec3 emissiveColor;
    float shininess;	
}; 

struct PointLight {
    vec3 position;
    vec3 diffuse;
    vec3 specular;

	float constant;
	float linear;
	float quadratic;
};

struct SpotLight {
    vec3 direction;
    float cutOff;
    float outerCutOff;

    vec3 position; 
    vec3 diffuse;
    vec3 specular;

	float constant;
	float linear;
	float quadratic;
};

in vec3 FragPos;  
in vec3 Normal;  
in vec2 TexCoords;
in vec4 FragPosLightSpace[_SPOT_LIGHTS_COUNT];

 out vec4 FragColor;

uniform vec3 viewPos;
uniform Material material;
uniform float alpha;
uniform float far_plane;
uniform int nrTones;

uniform PointLight pointLights[_POINT_LIGHTS_COUNT];
uniform samplerCube pointLightsDepthMaps[_POINT_LIGHTS_COUNT];
uniform SpotLight spotLights[_SPOT_LIGHTS_COUNT];
uniform sampler2DShadow spotLightsDepthMaps[_SPOT_LIGHTS_COUNT];

//x: use diffuse map or color
//y: use specular map or color
//z:
uniform ivec4 controls;


// pointlight smoothing
vec3 sampleDiscGrid[20] = vec3[]
(
   vec3(1, 1,  1), vec3( 1, -1,  1), vec3(-1, -1,  1), vec3(-1, 1,  1), 
   vec3(1, 1, -1), vec3( 1, -1, -1), vec3(-1, -1, -1), vec3(-1, 1, -1),
   vec3(1, 1,  0), vec3( 1, -1,  0), vec3(-1, -1,  0), vec3(-1, 1,  0),
   vec3(1, 0,  1), vec3(-1,  0,  1), vec3( 1,  0, -1), vec3(-1, 0, -1),
   vec3(0, 1,  1), vec3( 0, -1,  1), vec3( 0, -1, -1), vec3( 0, 1, -1)
);

float addPointLight(int index, vec3 norm, vec3 viewDir);
float addSpotLight(int index, vec3 norm, vec3 viewDir);
float calculateShadow(vec4 fpls, sampler2D dm);
float calculateShadowPoint(vec3 lightPos, samplerCube dm);

void main() {    
    // properties
    vec3 norm = normalize(Normal);
    vec3 viewDir = normalize(viewPos - FragPos);
	float result;

    for(int i = 0; i < _POINT_LIGHTS_COUNT; i++) {
        result += addPointLight(i, norm, viewDir);
	}
	for(int i = 0; i < _SPOT_LIGHTS_COUNT; i++) {
        result += addSpotLight(i, norm, viewDir);
	}

	float ambient;
	if (controls.x == 1) {		
		ambient = 0.1;
	} else {		
		ambient = length(material.ambientColor);
	} 
    
    FragColor = vec4(vec3(texture(material.tonalArtMap, vec3(TexCoords,(-ambient + 1.0f - result)*nrTones)).r), alpha);
    //FragColor = vec4(vec3(texture(material.tonalArtMap, vec3(TexCoords,16)).r), alpha);
	//FragColor = vec4(vec3((texture(material.tonalArtMap,vec3(TexCoords,(1.0f-result)*nrTones)).r)),1.0f);
}

float calculateShadow(vec4 fpls, sampler2DShadow dm) {
	
	float bias = 0.0005;

    // perform perspective divide
    vec3 projCoords = fpls.xyz / fpls.w;
    // transform to [0,1] range
    projCoords = projCoords * 0.5 + 0.5;

	if(projCoords.z > 1.0)
        return 0.0;
			
	float visibility = 0.0;
	vec3 texelSize = 1.0 / vec3(textureSize(dm, 0), 0);
	for(int x = -1; x <= 1; ++x)
	{
		for(int y = -1; y <= 1; ++y)
		{
			visibility += texture(dm, vec3(projCoords.xy, projCoords.z - bias) + texelSize * vec3(x, y, 0)); 			
		}    
	}
	visibility /= 9.0;

    return visibility;
}

float calculateShadowPoint(vec3 lightPos, samplerCube dm) {
    
    vec3 fragToLight = FragPos - lightPos;    
    float currentDepth = length(fragToLight);
   
    float shadow = 0.0;
    float bias = 0.2;
    int samples = 20;
    float viewDistance = length(viewPos - FragPos);
    float diskRadius = (1.0 + (viewDistance / far_plane)) / 25.0;
    for(int i = 0; i < samples; ++i)
    {
        float closestDepth = texture(dm, fragToLight + sampleDiscGrid[i] * diskRadius).r;
        closestDepth *= far_plane; 
        if(currentDepth - bias > closestDepth)
            shadow += 1.0;
    }
    shadow /= float(samples);
        
    //testing
    //FragColor = vec4(vec3(closestDepth / far_plane), 1.0);    
        
    return shadow;
} 

float addPointLight(int index, vec3 norm, vec3 viewDir) {
	PointLight light = pointLights[index];
	
	float shadow = calculateShadowPoint(light.position, pointLightsDepthMaps[index]);
	if (shadow == 1.0f) return 0.0f;
	
	float distance = length(light.position - FragPos);
    float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance)); 
	// travel distance correction test
	//if (attenuation < 0.05f) return 0.0f;

    // diffuse     
    vec3 lightDir = normalize(light.position - FragPos);
    float diff = max(dot(norm, lightDir), 0.0);
	float diffuse;
	vec3 emission;

	diffuse = length(light.diffuse) * diff;
	
	// specular        
    vec3 halfwayDir = normalize(lightDir + viewDir);  
    float spec = pow(max(dot(norm, halfwayDir), 0.0),  material.shininess);    
	float specular;
	//specular = length(light.specular) * spec;
    return ((1 - shadow) * (diff + specular)) * attenuation;
}

float addSpotLight(int index, vec3 norm, vec3 viewDir) {
	SpotLight light = spotLights[index];
			
    vec3 lightDir = normalize(light.position - FragPos);    
    float diff = max(dot(norm, lightDir), 0.0);
	            
    float theta = dot(lightDir, normalize(-light.direction)); 
    float epsilon = light.cutOff - light.outerCutOff;
    float intensity = clamp((theta - light.outerCutOff) / epsilon, 0.0, 1.0);
	if (intensity == 0.0f) return 0.0f;
		
	float visibility = calculateShadow(FragPosLightSpace[index], spotLightsDepthMaps[index]);
	if (visibility == 0.0f) return 0.0f;

	float distance = length(light.position - FragPos);
    float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance)); 

	float diffuse;
	diffuse = length(light.diffuse) * diff;  


	// specular        
    vec3 halfwayDir = normalize(lightDir + viewDir);  
    float spec = pow(max(dot(norm, halfwayDir), 0.0),  material.shininess);    
	float specular;
	//specular = length(light.specular) * spec ;  

    return visibility * (diff + specular) * attenuation * intensity;
}


#version 430 core

#define _THRESHOLD 0.1f

in vec2 TexCoords;

uniform sampler2DMS normalInformation;
uniform sampler2DMS depthInformation;

uniform float nearZ;
uniform float farZ;

layout (location = 0) out vec4 contours;

float normalizeZ(float x)
{
	float z = 2.0*x-1.0;
	return 2.0*farZ*nearZ/(farZ+nearZ - z*(farZ-nearZ));	
}

vec3 normalizeNormal(vec3 vec){
	return 2.0*vec -1.0f;
}

vec4 textureFetch(sampler2DMS sampler, ivec2 textureCoords){
/*
	vec4 result = vec4(0.0f);
	for (int i = 0; i < 4; i++) {
		result += texelFetch(sampler, textureCoords, i);
	}
	return result/4.0f;
	*/
	return texelFetch(sampler,textureCoords,gl_SampleID);
}

void main()
{    
	ivec2 depthCoords = ivec2(textureSize(depthInformation) * TexCoords);
	ivec2 normalCoords = ivec2(textureSize(normalInformation) * TexCoords);
	
	
    ivec2 dx = ivec2(1,0);
	ivec2 dy = ivec2(0,1);
	
	ivec2 pDepth=depthCoords-dy;
	ivec2 pNormal=normalCoords-dy;
	float x1 = textureFetch(depthInformation,pDepth-dx).x;
	x1 = normalizeZ(x1);
	float x2 = textureFetch(depthInformation,pDepth).x;
	vec3 y2 = textureFetch(normalInformation,pNormal).xyz;
	y2 = normalizeNormal(y2);
	x2 = normalizeZ(x2);
	float x3 = textureFetch(depthInformation,pDepth+dx).x;	
	x3 = normalizeZ(x3);
	pDepth=depthCoords;
	pNormal=normalCoords;
	float x4 = textureFetch(depthInformation,pDepth-dx).x;
	vec3 y4 = textureFetch(normalInformation,pNormal-dx).xyz;
	y4=normalizeNormal(y4);
	x4 = normalizeZ(x4);
	float x5 = textureFetch(depthInformation,pDepth).x;
	vec3 y5 = textureFetch(normalInformation,pNormal).xyz;
	y5 = normalizeNormal(y5);
	x5 = normalizeZ(x5);
	float x6 = textureFetch(depthInformation,pDepth+dx).x;	
	vec3 y6 = textureFetch(normalInformation,pNormal+dx).xyz;	
	x6 = normalizeZ(x6);
	y6 = normalizeNormal(y6);
	pDepth=depthCoords+dy;
	pNormal=normalCoords+dy;
	float x7 = textureFetch(depthInformation,pDepth-dx).x;
	x7 = normalizeZ(x7);
	float x8 = textureFetch(depthInformation,pDepth).x;
	vec3 y8 = textureFetch(normalInformation,pNormal).xyz;
	x8 = normalizeZ(x8);
	y8 = normalizeNormal(y8);
	float x9 = textureFetch(depthInformation,pDepth+dx).x;
	x9 = normalizeZ(x9);
	
	float Gx = x1-x3 + 2.0*(x4-x6)+ x7-x9;

	float Gy = x1-x7 + 2.0*(x2-x8)+ x3-x6;

	vec4 NL = vec4(1.0f)-vec4(dot(y2,y5),dot(y4,y5),dot(y6,y5), dot(y8,y5));
	
	float gradient = sqrt(Gx * Gx + Gy * Gy);


	float result = smoothstep(0.6,0.4,gradient);
	result *= smoothstep(0.6,0.0,length(NL));

	contours = vec4(result);
	contours.w = 1;

	
}
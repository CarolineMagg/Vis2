#version 450 core

layout(local_size_x = 1, local_size_y = 1) in;
layout(rgba32f, binding = 0) uniform image2DArray lb;
layout(rgba32f, binding = 1) uniform image2DArray ldb;

layout(rgba32f, binding = 2) uniform imageCube results;


uniform vec3 voxelSize;
uniform vec3 lightVSPos;
uniform vec3 lightColor;

uniform mat4 viewMatrix;
uniform vec4 viewPos;
uniform vec3 viewDir;
uniform float sphereRadius;
uniform vec3 middleOfPlaneVS;
uniform float planeDistance;

uniform vec3 middleOfPlaneVSOpp;

uniform float planeWidth;
uniform float planeHeight;

uniform float planeLeft;

float boxSize = 2.0;


vec3 intersectPlane(vec3 n, vec3 p0, vec3 r, vec3 r0)
{
	float d = dot(n, r);
	//if (abs(d) < 1e-6) return r0;
	//float t = dot((p0-r0), n) / d;
	float t = -(dot(p0 - r0, n) ) / d;
	return r0 + r * t;
}

void main() {
  
  ivec3 pixel_coords = ivec3(gl_GlobalInvocationID.xyz);  
  
  vec3 pixelPos = middleOfPlaneVSOpp + vec3(-0.5 + pixel_coords.x/planeWidth, -0.5 + pixel_coords.y/planeHeight, 0);  
  
    
  vec4 light = imageLoad(lb, pixel_coords);
  vec4 lightdir = imageLoad(ldb, pixel_coords);

  
  vec3 posXNormal = vec3(-1,0,0);
  vec3 posXIntersect = intersectPlane(
		posXNormal,
		vec3(boxSize/2.0, 0, 0),
		vec3(inverse(viewMatrix) * lightdir),
		vec3(inverse(viewMatrix) * vec4(pixelPos,1))
	);
	ivec2 TexC = ivec2(posXIntersect.x * planeWidth, posXIntersect.y * planeHeight);

	
	imageStore(results, ivec3(TexC, 0), light);

	vec3 posZNormal = normalize(transpose(inverse(mat3(viewMatrix))) * vec3(0,0,-1));
	vec3 posZIntersect = intersectPlane(
		posZNormal,
		vec3(viewMatrix * vec4(0, 0, boxSize/2.0, 1)),
		vec3(lightdir),
		pixelPos
	);
	TexC = ivec2(posZIntersect.x * planeWidth, posZIntersect.y * planeHeight);
	if (all(greaterThan(posZIntersect.xy, vec2(0.0))) && all(lessThan(posZIntersect.xy, vec2(1.0))) )
		imageStore(results, ivec3(TexC, 4), vec4(posZIntersect.xy,0,1));

	vec3 negZNormal = normalize(transpose(inverse(mat3(viewMatrix))) * vec3(0,0,1));
	vec3 negZIntersect = intersectPlane(
		negZNormal,
		vec3(viewMatrix * vec4(0, 0, -boxSize/2.0, 1)),
		vec3(lightdir),
		pixelPos
	);
	TexC = ivec2(negZIntersect.x * planeWidth, negZIntersect.y * planeHeight);

	if (all(greaterThan(negZIntersect.xy, vec2(0.0))) && all(lessThan(negZIntersect.xy, vec2(1.0))) )
		imageStore(results, ivec3(TexC, 5), vec4(negZIntersect.xy,0,1));
  
}
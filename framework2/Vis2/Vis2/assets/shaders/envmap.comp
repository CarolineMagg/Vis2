#version 450 core

layout(local_size_x = 1, local_size_y = 1) in;
layout(rgba32f, binding = 0) uniform image2DArray lb;
layout(rgba32f, binding = 1) uniform image2DArray ldb;

layout(rgba32f, binding = 2) uniform imageCube results;


uniform vec3 voxelSize;
uniform vec3 lightVSPos;
uniform vec3 lightColor;

uniform mat4 viewMatrix;
uniform mat4 inverseViewMatrix;

uniform float sphereRadius;
uniform vec3 middleOfPlaneVS;
uniform vec3 middleOfPlaneVSOpp;

uniform float planeWidth;
uniform float planeHeight;

layout(location = 100) uniform mat4 fl;
layout(location = 101) uniform mat4 fl1;
layout(location = 102) uniform mat4 fl2;
layout(location = 103) uniform mat4 fl3;
layout(location = 104) uniform mat4 fl4;
layout(location = 105) uniform mat4 fl5;

float boxSize = 1.0;


vec3 intersectPlane(vec3 n, vec3 p0, vec3 r, vec3 r0, out float t)
{
	float d = dot(n, r);
	if (d < 1e-6) {
		t = 0;
		return r0;
	}
	t = dot((p0-r0), n) / d;	

	return r0 + r * t;
}

void main() {
  
  ivec3 pixel_coords = ivec3(gl_GlobalInvocationID.xyz);  
  float t;
  vec3 pixelPos = vec3(inverseViewMatrix * vec4(middleOfPlaneVSOpp + vec3(-0.5 + pixel_coords.x/planeWidth, -0.5 + pixel_coords.y/planeHeight, 0), 1.0));
  
    
  vec4 light = imageLoad(lb, pixel_coords);
  vec3 lightdir = normalize(mat3(inverseViewMatrix) * imageLoad(ldb, pixel_coords).xyz);
  
    
  vec3 posXIntersect = intersectPlane(
		vec3(1.0,0.0,0.0),
		vec3(boxSize/2.0, 0, 0),
		lightdir,
		pixelPos,
		t
	);
	vec4 pos = vec4(0);	
	if (t != 0) {
		pos = fl * vec4(posXIntersect, 1);	
		imageStore(results, ivec3(planeWidth /2+ planeWidth*pos.xy, 0), light);
	}
			
	vec3 negXIntersect = intersectPlane(
		vec3(-1.0,0.0,0.0),
		vec3(-boxSize/2.0, 0, 0),
		lightdir,
		pixelPos,
		t
	);	
	if (t != 0) {
		pos = fl1 * vec4(negXIntersect, 1);	
		imageStore(results, ivec3(planeWidth /2+ planeWidth*pos.xy, 1), light);
	}

	vec3 posYIntersect = intersectPlane(
		vec3(0.0,1.0,0.0),
		vec3(0.0,boxSize/2.0, 0),
		lightdir,
		pixelPos,
		t
	);	
	if (t != 0) {
		pos = fl2 * vec4(posYIntersect, 1);	
		imageStore(results, ivec3(planeWidth /2+ planeWidth*pos.xy, 2), light);
	}

	vec3 negYIntersect = intersectPlane(
		vec3(0.0,-1.0,0.0),
		vec3(0.0,-boxSize/2.0, 0),
		lightdir,
		pixelPos,
		t
	);	
	if (t != 0) {
		pos = fl3 * vec4(negYIntersect, 1);	
		imageStore(results, ivec3(planeWidth /2+ planeWidth*pos.xy, 3), light);
	}
	
	vec3 posZIntersect = intersectPlane(
		vec3(0,0,1.0),
		vec3(0, 0, boxSize/2.0),
		lightdir,
		pixelPos,
		t
	);
	
	
	if (t != 0) {
		pos = fl4 * vec4(posZIntersect, 1);
		imageStore(results, ivec3(planeWidth/2+ planeWidth*pos.xy, 4), light);
	}
					
	vec3 negZIntersect = intersectPlane(
		vec3(0,0,-1.0),
		vec3(0, 0, -boxSize/2.0),
		lightdir,
		pixelPos,
		t
	);
	
	if (t != 0) {
		pos = fl5 * vec4(negZIntersect, 1);
		imageStore(results, ivec3(planeWidth/2+ planeWidth*pos.xy,5), light);
	}
}
#version 330 core
out vec4 FragColor;

in vec2 TexCoords;

uniform sampler3D depthMap;
uniform sampler2D depthMap2;

uniform float near_plane;
uniform float far_plane;

float LinearizeDepth(float depth)
{
    float z = depth * 2.0 - 1.0; // Back to NDC 
    return (2.0 * near_plane * far_plane) / (far_plane + near_plane - z * (far_plane - near_plane));	
}

// TESTING SHADER: Modify return values as needed

void main()
{             
    float depthValue = texture(depthMap2, TexCoords).r;   
    //FragColor = vec4(vec3(LinearizeDepth(depthValue) / far_plane), 1.0); // perspective
    
	//main^^^^^^
	//FragColor = vec4(vec3(depthValue), 1.0); // orthographic

	//test
	
    if (depthValue < 1.0)
        FragColor = vec4(texture(depthMap2, TexCoords).rgb, 1);
    else        
        FragColor = vec4(0.5,1.0,0.5,1.0);

    FragColor = texture(depthMap, vec3(TexCoords, 0.1));
}

